mutate(bl.s=cm.s/bl)%>%
select(-amp)%>%
pivot_wider(names_from = fin,values_from = amp.bl) %>%
mutate(amp.sum=L+R)
# 2. Compute mean maximum* of all the amp.sums ----------------------------
find.peaks <- function(x,y,mult=100){
f <- fget(features(x = x,y=y*mult))[2:3]%>%
as_tibble()%>%
filter(curvature<0)%>%
mutate(peaks=round(crit.pts,0))
return(f$peaks)
}
pseed.max <- pseed.wide%>%
group_by(fish,speed)%>%
mutate(peak=frame %in% find.peaks(frame,amp.sum))%>%
filter(peak==T)
pseed.max$peak <- NULL
pseed.sum.max<- pseed.max %>%
group_by(fish, speed) %>%
summarize(amp.sum.mean=mean(amp.sum))
# 3.  Custom function to compute standard error of the mean (SE) --------
SE <- function(x){
sd(x)/ sqrt(length(x))
}
pseed.sum.se <- pseed.max%>%
group_by(fish,speed)%>%
summarize(amp.sum.se = SE(amp.sum))
pseed.sum.max <- pseed.sum.max %>%
left_join(pseed.sum.se, by = c("speed","fish"))
# 4. Plot mean amp.sum vs specific swimming speed -------------------------
pd <- position_dodge(0.1)
pseed.sum.max %>%
ggplot(aes(x=speed,y=amp.sum.mean,col=fish))+geom_point()+geom_smooth(method="lm")+geom_errorbar(aes(ymin=amp.sum.mean-amp.sum.se, ymax=amp.sum.mean+amp.sum.se), width=0.5, colour="black", position=pd)+theme_classic()
# 5. Merge met rate with pseed.sum.max --------------------------------------------
pseed.met.rate <- read_csv("pseed.met.rate.csv")
pseed.max <- pseed.max%>%
merge(pseed.met.rate,by=c("fish","date","m.s","cm.s","bl.s"))
pseed.mean.rate <- pseed.max %>%
group_by(fish, speed)%>%
summarize(amp.met.rate=mean(met.rate))
pseed.sum.max <- pseed.sum.max %>%
left_join(pseed.mean.rate, by = c("speed","fish"))
# 6. plot  metabolic power output vs. amp.sum.mean --------
pseed.sum.max %>%
ggplot(aes(x=amp.met.rate,y=amp.sum.mean,col=fish))+geom_point()+geom_smooth(method="lm")+geom_errorbar(aes(ymin=amp.sum.mean-amp.sum.se, ymax=amp.sum.mean+amp.sum.se), width=0.05, colour="black", position=pd)+theme_classic()
library(tidyverse)
library(features)
pseed <- read_csv("pseed.fin.amps.csv")
pseed.bl <- read_csv("pseed.lengths.csv")
speeds <- read_csv("pseed.calibration.csv")
# download data sets
#1 establish pseed.wide data tibble
pseed2 <- pseed%>%
left_join(speeds,by=c("speed"="vol"))%>%
# left_join() operation takes the speeds table and joins it leftward to the
# pseed table. creates a new dataframe of this combo. now we have m/s and cm/s columns
left_join(pseed.bl,by="fish")%>%
# joining pseed.bl to new tibble. now we have a new bl (in cm) column
mutate(bl.s=cm.s/bl)%>%
# add a new column with bl/s by dividing cm/s by bl (in cm)
print()
# in module, broke this into multiple steps. combined them with pipe
pseed.wide <- pseed2 %>%
select(-amp)%>% # removed amp column so we just have amp.bl
pivot_wider(names_from = fin,values_from = amp.bl) %>% # adds 2 new columns. names of columns come from fin column, values for these columns come from amp.bl column. so fin and amp.bl columns are now gone
mutate(amp.sum=L+R)%>% # adding new amp.sum column
print()
#2 mean of max amp sums for each fish at each speed
# creating a custom func:
find.peaks <- function(x,y,mult=100){ #define the functions parameter/inputs:x,y, and how much we want to multiple y by (remember the rounding issue)
f <- fget(features(x = x,y=y*mult))[2:3]%>% #store results in `f` and compute the features for the x-y relationship, wrap in in fget to retrieve the important features, subset the results to take the 2nd and 3rd items (the critical points and curvature)
as_tibble()%>% # putting data in a tibble
filter(curvature<0)%>% # filter that returns curvatures <0
mutate(peaks=round(crit.pts,0)) #adds a column that rounds the critical point to an integer that represents the frame
return(f$peaks) # return the peaks from tibble
}
pseed.max <- pseed.wide%>%
group_by(fish,speed)%>%
mutate(peak=frame %in% find.peaks(frame,amp.sum))%>% # using the func we made
filter(peak==T) #new filter
# looking at all the data so just taking out the parts that are peaks to simplify it
pseed.sum.max <- pseed.max %>%
group_by(fish,speed)%>% # grouped by fish and speed
summarize(amp.sum.mean=mean(amp.sum)) %>%
print()
#3 custom function that computes the standard error of the mean (SE)
#  new column in summary table pseed.sum.max for SE called amp.sum.se
calc.se <- function(x) {
as.numeric(x)
standard_dev <- sd(x)
standard_error <- standard_dev/sqrt(length(x))
return(standard_error)
}
pseed.sum.se <- pseed.max%>%
group_by(fish,speed)%>%
summarize(amp.sum.se = calc.se(amp.sum)) # new column based on standard errors of amp sums vs means
pseed.sum.max <- pseed.sum.max %>%
left_join(pseed.sum.se, by = c("speed","fish")) # adding column from other table to here
#4 plot of amp.sum.mean vs speed with error bars
pseed.sum.max %>%ggplot(aes(x=speed, y=amp.sum.mean, col = fish)) + geom_point(size=2) + geom_errorbar(aes(ymin=amp.sum.mean-amp.sum.se, ymax=amp.sum.mean+amp.sum.se), width = 0.05, size = 0.5)+geom_smooth(method="lm")+theme_classic()
#5 merge new data with pseed.sum.max
pseed.met.rate <- read_csv("pseed.met.rate.csv")
pseed.max <- pseed.max%>%
merge(pseed.met.rate,by=c("fish","date","m.s","cm.s","bl.s"))
pseed.mean.rate <- pseed.max %>%
group_by(fish, speed)%>%
summarize(amp.met.rate=mean(met.rate))
pseed.sum.max <- pseed.sum.max %>%
left_join(pseed.mean.rate, by = c("speed","fish"))
#6 plot of metabolic power output of each fish vs. mean maximum of amp.sum
pseed.sum.max %>%
ggplot(aes(x=amp.sum.mean,y=amp.met.rate,col=fish))+geom_point()+geom_smooth(method="lm")+geom_errorbar(aes(ymin=amp.sum.mean-amp.sum.se, ymax=amp.sum.mean+amp.sum.se), width=0.05, colour="black")+theme_classic()
pseed.sum.max %>%
ggplot(aes(y=amp.sum.mean,x=amp.met.rate,col=fish))+geom_point()+geom_smooth(method="lm")+geom_errorbar(aes(ymin=amp.sum.mean-amp.sum.se, ymax=amp.sum.mean+amp.sum.se), width=0.05, colour="black")+theme_classic()
View(pseed.sum.max)
pseed.sum.max %>%
ggplot(aes(x=amp.sum.mean,y=amp.met.rate,col=fish))+geom_point()+geom_smooth(method="lm")+geom_errorbar(aes(ymin=amp.sum.mean-amp.sum.se, ymax=amp.sum.mean+amp.sum.se), width=0.05, colour="black")+theme_classic()
library(tidyverse)
library(features)
pseed <- read_csv("pseed.fin.amps.csv")
pseed.bl <- read_csv("pseed.lengths.csv")
speeds <- read_csv("pseed.calibration.csv")
pseed.met.rate <- read_csv("pseed.met.rate.csv")
# download data sets
#1 establish pseed.wide data tibble
pseed2 <- pseed%>%
left_join(speeds,by=c("speed"="vol"))%>%
# left_join() operation takes the speeds table and joins it leftward to the
# pseed table. creates a new dataframe of this combo. now we have m/s and cm/s columns
left_join(pseed.bl,by="fish")%>%
# joining pseed.bl to new tibble. now we have a new bl (in cm) column
mutate(bl.s=cm.s/bl)%>%
# add a new column with bl/s by dividing cm/s by bl (in cm)
print()
# in module, broke this into multiple steps. combined them with pipe
pseed.wide <- pseed2 %>%
select(-amp)%>% # removed amp column so we just have amp.bl
pivot_wider(names_from = fin,values_from = amp.bl) %>% # adds 2 new columns. names of columns come from fin column, values for these columns come from amp.bl column. so fin and amp.bl columns are now gone
mutate(amp.sum=L+R)%>% # adding new amp.sum column
print()
#2 mean of max amp sums for each fish at each speed
# creating a custom func:
find.peaks <- function(x,y,mult=100){ #define the functions parameter/inputs:x,y, and how much we want to multiple y by (remember the rounding issue)
f <- fget(features(x = x,y=y*mult))[2:3]%>% #store results in `f` and compute the features for the x-y relationship, wrap in in fget to retrieve the important features, subset the results to take the 2nd and 3rd items (the critical points and curvature)
as_tibble()%>% # putting data in a tibble
filter(curvature<0)%>% # filter that returns curvatures <0
mutate(peaks=round(crit.pts,0)) #adds a column that rounds the critical point to an integer that represents the frame
return(f$peaks) # return the peaks from tibble
}
pseed.max <- pseed.wide%>%
group_by(fish,bl.s)%>%
mutate(peak=frame %in% find.peaks(frame,amp.sum))%>% # using the func we made
filter(peak==T) #new filter
# looking at all the data so just taking out the parts that are peaks to simplify it
pseed.sum.max <- pseed.max %>%
group_by(fish,bl.s)%>% # grouped by fish and speed
summarize(amp.sum.mean=mean(amp.sum)) %>%
print()
#3 custom function that computes the standard error of the mean (SE)
#  new column in summary table pseed.sum.max for SE called amp.sum.se
calc.se <- function(x) {
as.numeric(x)
standard_dev <- sd(x)
standard_error <- standard_dev/sqrt(length(x))
return(standard_error)
}
pseed.sum.se <- pseed.max%>%
group_by(fish,bl.s)%>%
summarize(amp.sum.se = calc.se(amp.sum)) # new column based on standard errors of amp sums vs means
pseed.sum.max <- pseed.sum.max %>%
left_join(pseed.sum.se, by = c("bl.s","fish")) # adding column from other table to here
#4 plot of amp.sum.mean vs speed with error bars
pseed.sum.max %>%ggplot(aes(x=bl.s, y=amp.sum.mean, col = fish)) + geom_point(size=2) + geom_errorbar(aes(ymin=amp.sum.mean-amp.sum.se, ymax=amp.sum.mean+amp.sum.se), width = 0.05, size = 0.5)+geom_smooth(method="lm")+theme_classic()
#5 merge new data with pseed.sum.max
pseed.max <- pseed.max%>%
merge(pseed.met.rate,by=c("fish","date","m.s","cm.s","bl.s"))
pseed.mean.rate <- pseed.max %>%
group_by(fish,bl.s)%>%
summarize(amp.met.rate=mean(met.rate))
pseed.sum.max <- pseed.sum.max %>%
left_join(pseed.mean.rate, by = c("bl.s","fish"))
#6 plot of metabolic power output of each fish vs. mean maximum of amp.sum
pseed.sum.max %>%
ggplot(aes(x=amp.sum.mean,y=amp.met.rate,col=fish))+geom_point()+geom_smooth(method="lm")+geom_errorbar(aes(ymin=amp.sum.mean-amp.sum.se, ymax=amp.sum.mean+amp.sum.se), width=0.05, colour="black")+theme_classic()
pseed.met.sum <- pseed.met.rate%>%
group_by(fish,bl.s)%>%
summarize(met.mean=mean(met.rate),
met.se=standard_error(met.rate))
pseed.sum.max <- pseed.sum.max%>%
left_join(pseed.met.sum)%>%
group_by(fish,bl.s)
pseed.met.sum <- pseed.met.rate%>%
group_by(fish,bl.s)%>%
summarize(met.mean=mean(met.rate),
met.se=standard_error(met.rate))
pseed.met.sum <- pseed.met.rate%>%
group_by(fish,bl.s)%>%
summarize(met.mean=mean(met.rate),
met.se=calc.se(met.rate))
s
pseed.sum.max <- pseed.sum.max%>%
left_join(pseed.met.sum)%>%
group_by(fish,bl.s)
pseed.sum.max %>%
ggplot(aes(x=amp.sum.mean,y=amp.met.rate,col=fish))+geom_point()+geom_smooth(method="lm")+geom_errorbar(aes(ymin=amp.sum.mean-amp.sum.se, ymax=amp.sum.mean+amp.sum.se), width=0.05, colour="black")+theme_classic()
pseed.sum.max %>%
ggplot(aes(x=amp.sum.mean,y=amp.met.rate,col=fish))+geom_point()+geom_smooth(method="lm")+geom_errorbar(aes(ymin=met.mean-met.se,ymax= met.mean+met.se), width=0.05, colour="black")+theme_classic()
pseed.sum.max %>%
ggplot(aes(x=amp.sum.mean,y=amp.met.rate,col=fish))+geom_point()+geom_smooth(method="lm")+geom_errorbar(aes(ymin=met.mean-met.se,ymax= met.mean+met.se), width=0.005, colour="black")+theme_classic()
pseed.met.sum <- pseed.met%>%
group_by(fish,bl.s)%>%
summarize(met.mean=mean(met.rate),
met.se=standard_error(met.rate))
pseed.met.sum <- pseed.met.rate%>%
group_by(fish,bl.s)%>%
summarize(met.mean=mean(met.rate),
met.se=standard_error(met.rate))
pseed.met.sum <- pseed.met.rate%>%
group_by(fish,bl.s)%>%
summarize(met.mean=mean(met.rate),
met.se=calc.se(met.rate))
pseed.met.kin <- pseed.sum.max%>%
left_join(pseed.met.sum)%>%
group_by(fish,bl.s)
#6
pseed.met.kin%>%
ggplot(aes(x=amp.sum.mean,y=met.mean,col=fish))+geom_point()+geom_errorbar(aes(ymin=met.mean-met.se,ymax= met.mean+met.se))+geom_smooth(method="lm")
#6
pseed.met.kin%>%
ggplot(aes(x=amp.sum.mean,y=amp.met.rate,col=fish))+geom_point()+geom_errorbar(aes(ymin=met.mean-met.se,ymax= met.mean+met.se))+geom_smooth(method="lm")
pseed.met.sum <- pseed.met.rate%>%
group_by(fish,bl.s)%>%
summarize(met.mean=mean(met.rate),
met.se=calc.se(met.rate))
pseed.sum.max <- pseed.sum.max%>%
left_join(pseed.met.sum)%>%
group_by(fish,bl.s)
pseed.sum.max %>%
ggplot(aes(x=amp.sum.mean,y=amp.met.rate,col=fish))+geom_point()+geom_smooth(method="lm")+geom_errorbar(aes(ymin=met.mean-met.se,ymax= met.mean+met.se), width=0.005, colour="black")+theme_classic()
pseed.sum.max %>%ggplot(aes(x=bl.s, y=amp.sum.mean, col = fish)) + geom_point(size=2) + geom_errorbar(aes(ymin=amp.sum.mean-amp.sum.se, ymax=amp.sum.mean+amp.sum.se), width = 0.05, size = 0.5)+geom_smooth(method="lm")+theme_classic()
pseed.sum.max %>%
ggplot(aes(x=amp.sum.mean,y=amp.met.rate, col=fish)) + geom_point(size=2) + geom_errorbar(aes(ymin=amp.sum.mean-amp.sum.se, ymax=amp.sum.mean+amp.sum.se), width = 0.05, size = 0.5)+geom_smooth(method="lm")+theme_classic()
View(pseed.sum.max)
pseed.sum.max %>%
ggplot(aes(x=amp.sum.mean,y=amp.met.rate,col=fish))+geom_point(size=2)+geom_smooth(method="lm")+geom_errorbar(aes(ymin=met.mean-met.se,ymax= met.mean+met.se), width=0.005, colour="black")+theme_classic()
pseed.sum.max %>%
ggplot(aes(x=amp.sum.mean,y=amp.met.rate,col=fish))+geom_point(size=2)+geom_smooth(method="lm")+geom_errorbar(aes(ymin=met.mean-met.se,ymax= met.mean+met.se), width=0.05, size=.5)+theme_classic()
pseed.sum.max %>%
ggplot(aes(x=amp.sum.mean,y=met.mean,col=fish))+geom_point(size=2)+geom_smooth(method="lm")+geom_errorbar(aes(ymin=met.mean-met.se,ymax= met.mean+met.se), width=0.05, size=.5)+theme_classic()
pseed.sum.max %>%
ggplot(aes(x=amp.sum.mean,y=met.mean,col=fish))+geom_point(size=2)+geom_smooth(method="lm")+geom_errorbar(aes(ymin=met.mean-met.se,ymax= met.mean+met.se), width=0.005, size=.5)+theme_classic()
pseed.sum.max %>%
ggplot(aes(x=amp.sum.mean,y=met.mean,col=fish))+geom_point()+geom_smooth(method="lm")+geom_errorbar(aes(ymin=met.mean-met.se,ymax= met.mean+met.se), width=0.005, size=.5)+theme_classic()
library(tidyverse)
library(features)
pseed <- read_csv("pseed.fin.amps.csv")
pseed.bl <- read_csv("pseed.lengths.csv")
speeds <- read_csv("pseed.calibration.csv")
pseed.met.rate <- read_csv("pseed.met.rate.csv")
# download data sets
#1 establish pseed.wide data tibble
pseed2 <- pseed%>%
left_join(speeds,by=c("speed"="vol"))%>%
# left_join() operation takes the speeds table and joins it leftward to the
# pseed table. creates a new dataframe of this combo. now we have m/s and cm/s columns
left_join(pseed.bl,by="fish")%>%
# joining pseed.bl to new tibble. now we have a new bl (in cm) column
mutate(bl.s=cm.s/bl)%>%
# add a new column with bl/s by dividing cm/s by bl (in cm)
print()
# in module, broke this into multiple steps. combined them with pipe
pseed.wide <- pseed2 %>%
select(-amp)%>% # removed amp column so we just have amp.bl
pivot_wider(names_from = fin,values_from = amp.bl) %>% # adds 2 new columns. names of columns come from fin column, values for these columns come from amp.bl column. so fin and amp.bl columns are now gone
mutate(amp.sum=L+R)%>% # adding new amp.sum column
print()
#2 mean of max amp sums for each fish at each speed
# creating a custom func:
find.peaks <- function(x,y,mult=100){ #define the functions parameter/inputs:x,y, and how much we want to multiple y by (remember the rounding issue)
f <- fget(features(x = x,y=y*mult))[2:3]%>% #store results in `f` and compute the features for the x-y relationship, wrap in in fget to retrieve the important features, subset the results to take the 2nd and 3rd items (the critical points and curvature)
as_tibble()%>% # putting data in a tibble
filter(curvature<0)%>% # filter that returns curvatures <0
mutate(peaks=round(crit.pts,0)) #adds a column that rounds the critical point to an integer that represents the frame
return(f$peaks) # return the peaks from tibble
}
pseed.max <- pseed.wide%>%
group_by(fish,bl.s)%>%
mutate(peak=frame %in% find.peaks(frame,amp.sum))%>% # using the func we made
filter(peak==T) #new filter
# looking at all the data so just taking out the parts that are peaks to simplify it
pseed.sum.max <- pseed.max %>%
group_by(fish,bl.s)%>% # grouped by fish and speed
summarize(amp.sum.mean=mean(amp.sum)) %>%
print()
#3 custom function that computes the standard error of the mean (SE)
#  new column in summary table pseed.sum.max for SE called amp.sum.se
calc.se <- function(x) {
as.numeric(x)
standard_dev <- sd(x)
standard_error <- standard_dev/sqrt(length(x))
return(standard_error)
}
pseed.sum.se <- pseed.max%>%
group_by(fish,bl.s)%>%
summarize(amp.sum.se = calc.se(amp.sum)) # new column based on standard errors of amp sums vs means
pseed.sum.max <- pseed.sum.max %>%
left_join(pseed.sum.se, by = c("bl.s","fish")) # adding column from other table to here
#4 plot of amp.sum.mean vs speed with error bars
pseed.sum.max %>%ggplot(aes(x=bl.s, y=amp.sum.mean, col = fish)) + geom_point(size=2) + geom_errorbar(aes(ymin=amp.sum.mean-amp.sum.se, ymax=amp.sum.mean+amp.sum.se), width = 0.05, size = 0.5)+geom_smooth(method="lm")+theme_classic()
#5 merge new data with pseed.sum.max
pseed.met.sum <- pseed.met.rate%>%
group_by(fish,bl.s)%>%
summarize(met.mean=mean(met.rate),
met.se=calc.se(met.rate))
pseed.sum.max <- pseed.sum.max%>%
left_join(pseed.met.sum)%>%
group_by(fish,bl.s)
#6 plot of metabolic power output of each fish vs. mean maximum of amp.sum
pseed.sum.max %>%
ggplot(aes(x=amp.sum.mean,y=met.mean,col=fish))+geom_point()+geom_smooth(method="lm")+geom_errorbar(aes(ymin=met.mean-met.se,ymax= met.mean+met.se), width=0.005, size=.5)+theme_classic()
pseed.sum.max %>%
ggplot(aes(x=amp.sum.mean,y=met.mean,col=fish))+geom_point()+geom_smooth(method="lm")+geom_errorbar(aes(ymin=met.mean-met.se,ymax= met.mean+met.se), width=0.005, size=.5)+theme_classic()
set.seed(123)
x.A=1:50
y.A=A*2+runif(50,1,200)
y.A=x.A*2+runif(50,1,200)
x.B=1:50
y.B=x.B*3+runif(50,1,200)
d <- tibble(x=c(x.A,x.B), y=c(y.A,y.B),species=c(rep("A",50),rep("B",50)))
library(dplyr)
d <- tibble(x=c(x.A,x.B), y=c(y.A,y.B),species=c(rep("A",50),rep("B",50)))
d%>% ggplot(aes(x,y))+geom_point()+geom_smooth(method="lm")
library(ggplot)
library(tidyverse)
d%>% ggplot(aes(x,y))+geom_point()+geom_smooth(method="lm")
d%>% ggplot(aes(x,y,col=species))+geom_point()+geom_smooth(method="lm")
spec.lm1 <- lm(y~x+species,data=d)
anova(spec.lm1)
# insignificant
spec.lm1 <- lm(y~x*species,data=d)
anova(spec.lm1)
spec.lm1 <- lm(y~x+species,data=d)
anova(spec.lm1)
# significant difference between means of species
summary(spec.lm1)
AIC(spec.lm1,spec.lm2)
spec.lm2 <- lm(y~x,d)
AIC(spec.lm1,spec.lm2)
spec.lm2 <- lm(y~x*species,d)
AIC(spec.lm1,spec.lm2)
anova(spec.lm2)
AIC(spec.lm1,spec.lm2)
library(tidyverse) # Rember to load your libraries!
library(ape)
library(nlme)
library(geiger)
library(caper)
library(phytools)
library(viridis)
#load data
anole <- read_csv("anole.dat.csv")
anole.eco <- read_csv("anole.eco.csv")
anole
anole2 <- anole%>%
left_join(anole.eco)%>%
filter(!Ecomorph%in%c("U","CH"))%>%
na.omit()%>%
print()
anole.log <- anole2%>%
mutate_at(c("SVL", "HTotal","PH","ArbPD"),log)
anole2%>%
ggplot(aes(SVL,HTotal))+geom_point()+geom_smooth(method="lm")
# seeing if hind limb length varies w size
# lm (linear model) is a good place to start for 2 continuous variables
anole.lm <- lm(HTotal~SVL,anole2)
coef(anole.lm)
anole2%>%
ggplot(aes(SVL,HTotal))+geom_point()+geom_abline(slope=coef(anole.lm)[2],intercept=coef(anole.lm)[1],col="blue")
pred.lm <-tibble(
SVL=SVL2,
H.pred=predict(anole.lm,newdata = data.frame(SVL=SVL2))
)
anole2%>%
ggplot(aes(SVL,HTotal))+geom_point()+geom_point(data=pred.lm,aes(SVL,H.pred),col="blue")
SVL2 <- seq(min(anole2$SVL),max(anole2$SVL),0.1)
pred.lm <-tibble(
SVL=SVL2,
H.pred=predict(anole.lm,newdata = data.frame(SVL=SVL2))
)
# creating a tibble w predictions to
anole2%>%
ggplot(aes(SVL,HTotal))+geom_point()+geom_point(data=pred.lm,aes(SVL,H.pred),col="blue")
summary(anole.lm)
logLik(anole.lm)
logLik(anole.allo)
anole.log%>%
ggplot(aes(HTotal,SVL,col=Ecomorph2))+geom_point()+geom_smooth(method="lm")
anole <- read_csv("anole.dat.csv")
anole.eco <- read_csv("anole.eco.csv")
anole2 <- anole%>%
left_join(anole.eco)%>% # merged data sets to create a new one
filter(!Ecomorph%in%c("U","CH"))%>% # removed rows containing U or CH
na.omit()%>% # omitting all rows that say n/a
print()
anole.log <- anole2%>%
mutate_at(c("SVL", "HTotal","PH","ArbPD"),log)
# changed data to log form to bring data closer to a normal distribution and
# to make everything a nice ration w the other stuff
anole2%>%
ggplot(aes(SVL,HTotal))+geom_point()+geom_smooth(method="lm")
# seeing if hind limb length varies w size
# lm (linear model) is a good place to start for 2 continuous variables
anole.lm <- lm(HTotal~SVL,anole2)
coef(anole.lm)
anole2%>%
ggplot(aes(SVL,HTotal))+geom_point()+geom_abline(slope=coef(anole.lm)[2],intercept=coef(anole.lm)[1],col="blue")
# looking at same data with a simple linear model
SVL2 <- seq(min(anole2$SVL),max(anole2$SVL),0.1)
pred.lm <-tibble(
SVL=SVL2,
H.pred=predict(anole.lm,newdata = data.frame(SVL=SVL2))
)
# creating a tibble w predictions to predict HVTotal instead of geom_smooth()
anole2%>%
ggplot(aes(SVL,HTotal))+geom_point()+geom_point(data=pred.lm,aes(SVL,H.pred),col="blue")
summary(anole.lm)
# p values of y int and slope are below .05 so linear graph of data seems to
# fit pretty well. but other stuff may fit better
anole.allo <- nls(HTotal~a*SVL^b, start=list(b=1, a=1),data = anole2)
summary(anole.allo)
logLik(anole.lm)
logLik(anole.allo)
anole.log%>%
ggplot(aes(HTotal,SVL,col=Ecomorph2))+geom_point()+geom_smooth(method="lm")
anole.log.eco.lm <- lm(HTotal~SVL*Ecomorph2,anole.log)
summary(anole.log.eco.lm)
anova(anole.log.eco.lm)
anole.log.lm  <- lm(HTotal~SVL,anole.log)
anova(anole.log.lm)
anole.log.aic <- AICc(anole.log.lm,anole.log.eco.lm)
aicw(anole.log.aic$AICc)
anole.log <- anole.log %>%
mutate(res=residuals(anole.log.lm))
# plotting residuals against Ecomorph2
p.eco <- anole.log%>%
ggplot(aes(x=Ecomorph2,y=res)) +geom_boxplot()
anole.tree <- read.tree("anole.tre")
plot(anole.tree,cex=0.4)
#PGLS under BM, no ecomorph
pgls.BM1 <- gls(HTotal ~SVL, correlation = corBrownian(1,phy = anole.tree,form=~Species),data = anole.log, method = "ML")
anole.phylo.aic <- AICc(pgls.BM1,pgls.BM2,pgls.OU1,pgls.OU2)
aicw(anole.phylo.aic$AICc)
install.packages("ape")
install.packages("nlme")
install.packages("geiger")
install.packages("caper")
install.packages("phytools")
install.packages("viridis")
install.packages("MuMIn")
library(tidyverse) # Remember to load your libraries!
library(ape)
library(nlme)
library(geiger)
library(caper)
library(phytools)
library(viridis)
library(MuMIn)
library(tidyverse) # Remember to load your libraries!
library(ape)
library(nlme)
library(geiger)
library(caper)
library(phytools)
library(viridis)
library(MuMIn)
install.packages("phangorn")
install.packages("cowplot")
install.packages("phangorn")
library(phangorn)
library(cowplot)
library(tidyverse) # Remember to load your libraries!
library(ape)
library(nlme)
library(geiger)
library(caper)
library(phytools)
library(viridis)
library(MuMIn)
# Libraries ---------------------------------------------------------------
suppressMessages({
library(tidyverse)
library(ape)
library(nlme)
library(geiger)
library(caper)
library(phytools)
library(viridis)
library(MuMIn)
library(phangorn)
library(cowplot)})
session info
sessionInfo()
install.packages("MuMIn")
library(MuMIn)
## get packages installed
packs = as.data.frame(installed.packages(.libPaths()[1]), stringsAsFactors = F)
## and now re-install install packages using install.packages()
install.packages(packs$Package)
install.packages(packs$Package)
install.packages(packs$Package)
install.packages(packs$Package)
install.packages(packs$Package)
